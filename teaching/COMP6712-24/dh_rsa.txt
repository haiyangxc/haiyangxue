
https://sagecell.sagemath.org/




##Deffie-Hellman over Group 14 of RFC 3526

# Hex p=FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AACAA68FFFFFFFFFFFFFFFF

p=32317006071311007300338913926423828248817941241140239112842009751400741706634354222619689417363569347117901737909704191754605873209195028853758986185622153212175412514901774520270235796078236248884246189477587641105928646099411723245426622522193230540919037680524235519125679715870117001058055877651038861847280257976054903569732561526167081339361799541336476559160368317896729073178384589680639671900977202194168647225871031411336429319536193471636533209717077448227988588565369208645296636077250268955505928362751121174096972998068410554359584866583291642136218231078990999448652468262416972035911852507045361090559
#temp=(p-1)
#F=factor(temp)
#list(F)
##q=16158503035655503650169456963211914124408970620570119556421004875700370853317177111309844708681784673558950868954852095877302936604597514426879493092811076606087706257450887260135117898039118124442123094738793820552964323049705861622713311261096615270459518840262117759562839857935058500529027938825519430923640128988027451784866280763083540669680899770668238279580184158948364536589192294840319835950488601097084323612935515705668214659768096735818266604858538724113994294282684604322648318038625134477752964181375560587048486499034205277179792433291645821068109115539495499724326234131208486017955926253522680545279
##such that p=2q+1

q=16158503035655503650169456963211914124408970620570119556421004875700370853317177111309844708681784673558950868954852095877302936604597514426879493092811076606087706257450887260135117898039118124442123094738793820552964323049705861622713311261096615270459518840262117759562839857935058500529027938825519430923640128988027451784866280763083540669680899770668238279580184158948364536589192294840319835950488601097084323612935515705668214659768096735818266604858538724113994294282684604322648318038625134477752964181375560587048486499034205277179792433291645821068109115539495499724326234131208486017955926253522680545279

Zp=Integers(p) # calculate over the ring of integers over Z_p
g=Zp(2) #the generator of order q subgroup of Z^*_p#

################################
#public parameters q, p, g=2  ##
################################

##  Alice  ##
#pick a at random and compute A = g^a
a = randint(1,q)
A = g^a
print('a =',a)
print('A =',A)

##  Bob  ##
#pick a at random and compute B = g^b
b = randint(1,q)
B = g^b
print('b =',b)
print('B =',B)

## verify that the shared keys match
print()
print('shared keys:')
print('for A, K=', B^a)
print('for B, K=', A^b)
print('do both keys match?', B^a==A^b)





##########  RSA Encryption ##################

### Key Gen ####
n_bits = 2048
p = random_prime(2^(n_bits/2))
q = random_prime(2^(n_bits/2))
N = p*q
PhiN = (p-1)*(q-1)


e = 2^16+1
print('Public key is')
print('N =',N)
print('e =',e)


print('Secret key is')
d = lift(mod(e, PhiN)^(-1))
print('PhiN =',PhiN)

print('d =',d)

Zp=Integers(N)# calculate over Zp


####### Textbook RSA Dec ###########

M = mod(randint(1,N-1),N)
#M=Zp(2)
C = M^e
print('Message =',M)
print('Ciphertext =',C)

####### Textbook RSA Dec ###########
Mprime = C^d
print('Message\' =',Mprime)
print('Did decryption succeed? ',Mprime==M)




